-- ScreenGui anlegen
local gui = Instance.new("ScreenGui")
gui.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")
gui.IgnoreGuiInset = true

-- Overlay (Icon statt schwarzer Hintergrund)
local teleportOverlay = Instance.new("ImageLabel")
teleportOverlay.Size = UDim2.new(1, 0, 1, 0)
teleportOverlay.Position = UDim2.new(0, 0, 0, 0)
teleportOverlay.BackgroundTransparency = 1 -- kein Hintergrund
teleportOverlay.Image = "rbxassetid://131431227047984"
teleportOverlay.ImageTransparency = 0 -- 0 = sichtbar, 1 = unsichtbar
teleportOverlay.ScaleType = Enum.ScaleType.Stretch -- skaliert das Bild über den ganzen Bildschirm
teleportOverlay.Visible = false
teleportOverlay.ZIndex = 10
teleportOverlay.Parent = gui

-- Text
local teleportLabel = Instance.new("TextLabel", teleportOverlay)
teleportLabel.AnchorPoint = Vector2.new(0.5, 0.5)
teleportLabel.Position = UDim2.new(0.5, 0, 0.4, 0)
teleportLabel.Size = UDim2.new(0, 400, 0, 100)
teleportLabel.BackgroundTransparency = 1
teleportLabel.Text = "H4x Hub Loading"
teleportLabel.Font = Enum.Font.SourceSansBold
teleportLabel.TextSize = 40
teleportLabel.TextColor3 = Color3.new(1, 1, 1)
teleportLabel.TextStrokeTransparency = 0.5
teleportLabel.ZIndex = 11

-- Ladebalken-Hintergrund
local barBack = Instance.new("Frame", teleportOverlay)
barBack.AnchorPoint = Vector2.new(0.5, 0.5)
barBack.Position = UDim2.new(0.5, 0, 0.55, 0)
barBack.Size = UDim2.new(0, 400, 0, 30)
barBack.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
barBack.ZIndex = 11

-- Ladebalken-Füllung
local barFill = Instance.new("Frame", barBack)
barFill.Size = UDim2.new(0, 0, 1, 0)
barFill.BackgroundColor3 = Color3.fromRGB(0, 255, 0)
barFill.ZIndex = 12


-- action
teleportOverlay.Visible = true

	for i = 1, 100 do  
		barFill.Size = UDim2.new(i/100, 0, 1, 0)  
		wait(0.03) -- Geschwindigkeit des Ladebalkens  
	end  

	wait(0.5)  
	teleportOverlay.Visible = false  


if game.PlaceId == 109983668079237 or game.PlaceId == 96342491571673 then


-- ðŸ“Œ Services & Module
local plrs = game:GetService("Players")
local rs = game:GetService("ReplicatedStorage")
local plr = plrs.LocalPlayer

local plotController = require(rs.Controllers.PlotController)
local Animals = require(rs.Datas.Animals)
local sharedAnimals = require(rs.Shared.Animals)

-- ðŸ“Œ Hilfsfunktionen
local function splitConcatenatedTable(str, sep)
local result = {}
for part in string.gmatch(str, "([^" .. sep .. "]+)") do
table.insert(result, part)
end
return result
end

-- Pareto-Filter: beste Tiere anhand bestimmter Keys finden
local function getBestByKeys(pets, keys)
local bestPets = {}
for _, pet in ipairs(pets) do
local dominated = false
for _, other in ipairs(pets) do
if other ~= pet then
local betterInAtLeastOne = false
local worseInAny = false
for _, key in ipairs(keys) do
local a, b = pet[key] or -math.huge, other[key] or -math.huge
if b > a then
worseInAny = true
elseif b < a then
betterInAtLeastOne = true
end
end
if worseInAny and not betterInAtLeastOne then
dominated = true
break
end
end
end
if not dominated then
table.insert(bestPets, pet)
end
end
return bestPets
end

-- ðŸ“Œ SAB Basis
local SAB = {}

function SAB.GetPlots()
if not _plots then
getgenv()._plots = getupvalue(plotController.Start, 2)
end
return _plots
end

function SAB.GetPlot(UID)
return (UID and SAB.GetPlots()[UID]) or plotController:GetMyPlot()
end

function SAB.GetPlotAnimals(plot)
plot = plot or SAB.GetPlot()
local _, b = plot.Channel:Get("AnimalList")
return b.AnimalList
end

function SAB.GetAnimalPrice(animalName)
return sharedAnimals:GetPrice(animalName)
end

function SAB.GetAnimalGeneration(animalName, mutation, traits)
return sharedAnimals:GetGeneration(animalName, mutation, traits, nil)
end

-- ðŸ“Œ Highlight Modes
local HighlightModeEnum = {
Price = 1,
Generation = 2,
Both = 3
}

-- =========================================================
-- ðŸŸ¢ Highlight Best Plot Animals
-- =========================================================
SAB.HighlightBestPlotAnimals = {
lastHighlights = {},
lastGuis = {},
CHECK_DELAY = 0.25,
highlightMode = HighlightModeEnum.Both,
highlightEveryBase = true,
excludeOwnBase = true
}

function SAB.HighlightBestPlotAnimals:GetBestAnimalGuisGlobal()
local matchingGuis, animals = {}, {}
for _, plot in pairs(SAB.GetPlots()) do
if not (self.excludeOwnBase and plot.UID == SAB.GetPlot().UID) then
local plotAnimals = SAB.GetPlotAnimals(plot)
if plotAnimals then
for podiumIndex, animal in pairs(plotAnimals) do
if animal ~= "Empty" and animal.Steal == false then
local price = SAB.GetAnimalPrice(animal.Index)
local generation = SAB.GetAnimalGeneration(animal.Index, animal.Mutation, animal.Traits)
if price and generation then
table.insert(animals, {
plotUID = plot.UID,
index = podiumIndex,
price = price,
generation = generation
})
end
end
end
end
end
end

if #animals == 0 then return end  

local keysTable = {}  
if bit32.band(self.highlightMode, HighlightModeEnum.Price) ~= 0 then  
    table.insert(keysTable, "price")  
end  
if bit32.band(self.highlightMode, HighlightModeEnum.Generation) ~= 0 then  
    table.insert(keysTable, "generation")  
end  

for _, v in pairs(getBestByKeys(animals, keysTable)) do  
    local s, bestAnimalGuiModel = pcall(function()  
        return workspace.Plots[v.plotUID].AnimalPodiums[v.index]  
    end)  
    if s and bestAnimalGuiModel then  
        local animalGui = bestAnimalGuiModel:FindFirstChild("AnimalOverhead", true)  
        if animalGui then  
            table.insert(matchingGuis, animalGui)  
        end  
    end  
end  
return matchingGuis

end

function SAB.HighlightBestPlotAnimals:GetBestAnimalGuisForPlot(plot)
local matchingGuis, animals = {}, {}
local plotAnimals = SAB.GetPlotAnimals(plot)
if not plotAnimals then return end

for podiumIndex, animal in pairs(plotAnimals) do  
    if animal ~= "Empty" and animal.Steal == false then  
        local price = SAB.GetAnimalPrice(animal.Index)  
        local generation = SAB.GetAnimalGeneration(animal.Index, animal.Mutation, animal.Traits)  
        if price and generation then  
            table.insert(animals, {  
                index = podiumIndex,  
                price = price,  
                generation = generation  
            })  
        end  
    end  
end  

if #animals == 0 then return end  

local keysTable = {}  
if bit32.band(self.highlightMode, HighlightModeEnum.Price) ~= 0 then  
    table.insert(keysTable, "price")  
end  
if bit32.band(self.highlightMode, HighlightModeEnum.Generation) ~= 0 then  
    table.insert(keysTable, "generation")  
end  

for _, v in pairs(getBestByKeys(animals, keysTable)) do  
    local s, bestAnimalGuiModel = pcall(function()  
        return workspace.Plots[plot.UID].AnimalPodiums[v.index]  
    end)  
    if s and bestAnimalGuiModel then  
        local animalGui = bestAnimalGuiModel:FindFirstChild("AnimalOverhead", true)  
        if animalGui then  
            table.insert(matchingGuis, animalGui)  
        end  
    end  
end  
return matchingGuis

end

function SAB.HighlightBestPlotAnimals:Toggle(boolean)
if boolean and not self.isRunning then
self.enabled = true
elseif not boolean and self.enabled then
self.enabled = false
return
end
self.isRunning = true

local function setAnimalGuiHuge(animalGui, bool)  
    if bool then  
        animalGui.AlwaysOnTop = true  
        animalGui.MaxDistance = 9999  
        animalGui.Size = UDim2.fromScale(100, 35)  
        table.insert(self.lastGuis, animalGui)  
    else  
        animalGui.AlwaysOnTop = false  
        animalGui.MaxDistance = 60  
        animalGui.Size = UDim2.fromScale(15, 5)  
    end  
end  

local function addHighlight(model)  
    local highlight = Instance.new("Highlight")  
    highlight.FillColor = Color3.fromRGB(0, 255, 0)  
    highlight.OutlineColor = Color3.fromRGB(0, 255, 0)  
    highlight.Parent = model  
    table.insert(self.lastHighlights, highlight)  
end  

local function cleanupEverything()  
    for _, v in pairs(self.lastHighlights) do  
        if v then v:Destroy() end  
    end  
    for _, v in pairs(self.lastGuis) do  
        setAnimalGuiHuge(v, false)  
    end  
    table.clear(self.lastHighlights)  
    table.clear(self.lastGuis)  
end  

while task.wait(self.CHECK_DELAY) and self.enabled do  
    cleanupEverything()  
    local bestAnimal  
    local maxGeneration = -math.huge  
    for _, plot in pairs(SAB.GetPlots()) do  
        if not (self.excludeOwnBase and plot == SAB.GetPlot()) then  
            local plotAnimals = SAB.GetPlotAnimals(plot)  
            if plotAnimals then  
                for podiumIndex, animal in pairs(plotAnimals) do  
                    if animal ~= "Empty" and animal.Steal == false then  
                        local value = SAB.GetAnimalGeneration(animal.Index, animal.Mutation, animal.Traits)  
                        if value and value > maxGeneration then  
                            maxGeneration = value  
                            bestAnimal = {plotUID = plot.UID, index = podiumIndex}  
                        end  
                    end  
                end  
            end  
        end  
    end  

    if bestAnimal then  
        local s, model = pcall(function()  
            return workspace.Plots[bestAnimal.plotUID].AnimalPodiums[bestAnimal.index]  
        end)  
        if s and model then  
            local gui = model:FindFirstChild("AnimalOverhead", true)  
            if gui then setAnimalGuiHuge(gui, true) end  
            addHighlight(model)  
        end  
    end  
end  

cleanupEverything()  
self.isRunning = false

end

-- =========================================================
-- ðŸŸ¢ Highlight Plot Timers
-- =========================================================
SAB.BigPlotTimers = {}

function SAB.BigPlotTimers:Toggle(boolean)
if self.Init then self:Init() end
if boolean and not self.isRunning then
self.enabled = true
elseif not boolean and self.enabled then
self.enabled = false
end

self.isRunning = true  
while task.wait() and self.enabled do  
    pcall(function()  
        for _, v in workspace.Plots:GetChildren() do  
            v.Purchases.PlotBlock.Main.BillboardGui.AlwaysOnTop = true  
            v.Purchases.PlotBlock.Main.BillboardGui.MaxDistance = 1000  
            v.Purchases.PlotBlock.Main.BillboardGui.Size = UDim2.fromScale(35, 50)  
        end  
    end)  
end  
pcall(function()  
    for _, v in workspace.Plots:GetChildren() do  
        v.Purchases.PlotBlock.Main.BillboardGui.AlwaysOnTop = false  
        v.Purchases.PlotBlock.Main.BillboardGui.MaxDistance = 60  
        v.Purchases.PlotBlock.Main.BillboardGui.Size = UDim2.fromScale(7, 10)  
    end  
end)  
self.isRunning = false

end



local OrionLib = loadstring(game:HttpGet("https://raw.githubusercontent.com/iubauhqhuiauhiszivjou1i89781iuwnuk8p/-/refs/heads/main/Lib.lua"))()

local Window = OrionLib:MakeWindow({Name = "Steal a Brainrot | H4x Hub", HidePremium = false, SaveConfig = true, ConfigFolder = "OrionTest"})


-- Tabs

local Tab = Window:MakeTab({
	Name = "Stealer (New)",
	Icon = "rbxassetid://4483345998",
	PremiumOnly = false
})


local Tab2 = Window:MakeTab({
	Name = "Helper",
	Icon = "rbxassetid://4483345998",
	PremiumOnly = false
})



local Tab3 = Window:MakeTab({
	Name = "Buy",
	Icon = "rbxassetid://4483345998",
	PremiumOnly = false
})



local Tab4 = Window:MakeTab({
	Name = "ESP",
	Icon = "rbxassetid://4483345998",
	PremiumOnly = false
})



local Tab5 = Window:MakeTab({
	Name = "Webhook",
	Icon = "rbxassetid://4483345998",
	PremiumOnly = false
})


local Tab6 = Window:MakeTab({
	Name = "Server",
	Icon = "rbxassetid://4483345998",
	PremiumOnly = false
})



local Tab7 = Window:MakeTab({
	Name = "Brainrot Finder",
	Icon = "rbxassetid://4483345998",
	PremiumOnly = false
})



local Section = Tab:AddSection({
	Name = "Stealer Section"
})




Tab:AddToggle({
	Name = "Float (Need 7 rebirths)",
	Default = false,
	Callback = function(state)
		local player = game:GetService("Players").LocalPlayer
        local Players = game:GetService("Players")
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local gui = player:FindFirstChild("PlayerGui"):FindFirstChild("CloneCarpetGui")

        -- GUI vorhanden? Nur an/aus
        if gui then
            gui.Enabled = state
            return
        end

        if state then
        --// Services
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")

local LocalPlayer = Players.LocalPlayer

--// GUI Aufbau (Duma Style)
local gui = Instance.new("ScreenGui")
gui.Name = "CloneCarpetGui"
gui.Parent = LocalPlayer:WaitForChild("PlayerGui")

-- Hauptframe
local main = Instance.new("Frame")
main.Size = UDim2.new(0, 220, 0, 50)
main.Position = UDim2.new(1, -250, 0, 70)
main.AnchorPoint = Vector2.new(0.5, 0.5)
main.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
main.BorderColor3 = Color3.fromRGB(255, 0, 0)
main.BorderSizePixel = 2
main.Parent = gui
Instance.new("UICorner", main).CornerRadius = UDim.new(0, 15)

-- Drag
main.Active = true
main.Draggable = true

-- Icon
local icon = Instance.new("ImageLabel")
icon.Size = UDim2.new(0, 30, 0, 30)
icon.Position = UDim2.new(0, 10, 0.5, -15)
icon.BackgroundTransparency = 1
icon.Image = "rbxassetid://101748902728550"
icon.Parent = main

-- Textlabel
local label = Instance.new("TextLabel")
label.Size = UDim2.new(0, 120, 1, 0)
label.Position = UDim2.new(0, 50, 0, 0)
label.BackgroundTransparency = 1
label.Text = "H4x Float"
label.TextColor3 = Color3.fromRGB(255, 255, 255)
label.TextSize = 18
label.Font = Enum.Font.GothamBold
label.TextXAlignment = Enum.TextXAlignment.Left
label.Parent = main

-- Switch
local switch = Instance.new("TextButton")
switch.Size = UDim2.new(0, 50, 0, 25)
switch.Position = UDim2.new(1, -60, 0.5, -12)
switch.AnchorPoint = Vector2.new(0, 0)
switch.BackgroundColor3 = Color3.fromRGB(120, 120, 120)
switch.Text = ""
switch.Parent = main
Instance.new("UICorner", switch).CornerRadius = UDim.new(1, 0)

-- Knopf
local knob = Instance.new("Frame")
knob.Size = UDim2.new(0, 20, 0, 20)
knob.Position = UDim2.new(0, 3, 0.5, -10)
knob.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
knob.Parent = switch
Instance.new("UICorner", knob).CornerRadius = UDim.new(1, 0)

--// Carpet Script Logik
local clone = nil
local carpetActive = false
local connection

local function equipQuantumCloner()
local backpack = LocalPlayer:FindFirstChild("Backpack")
if backpack then
local tool = backpack:FindFirstChild("Quantum Cloner") or (LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Quantum Cloner"))
if tool then
tool.Parent = LocalPlayer.Character
end
end
end

local function spawnClone()
equipQuantumCloner()
ReplicatedStorage.Packages.Net["RE/UseItem"]:FireServer()
task.wait(0.5)

for _, v in ipairs(workspace:GetChildren()) do  
    if v.Name:match("_Clone") and v:FindFirstChild("HumanoidRootPart") then  
        clone = v  
        break  
    end  
end  

if clone then  
    for _, part in ipairs(clone:GetDescendants()) do  
        if part:IsA("BasePart") then  
            part.CanCollide = false  
        end  
    end  
    if clone:FindFirstChild("Torso") then  
        clone.Torso.CanCollide = true  
    elseif clone:FindFirstChild("UpperTorso") then  
        clone.UpperTorso.CanCollide = true  
    end  
end  

return clone

end

local function stopCarpet()
if connection then
connection:Disconnect()
connection = nil
end
carpetActive = false
switch.BackgroundColor3 = Color3.fromRGB(120, 120, 120)
end

local function startCarpet()
local hrp = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
if not clone or not hrp then return end

if not clone.PrimaryPart then  
    clone.PrimaryPart = clone:FindFirstChild("HumanoidRootPart") or clone:FindFirstChild("Torso") or clone:FindFirstChild("UpperTorso")  
    if not clone.PrimaryPart then  
        warn("K")  
        return  
    end  
end  

connection = RunService.RenderStepped:Connect(function()  
    if clone and hrp and clone.PrimaryPart then  
        local flatRotation = CFrame.Angles(math.rad(-90), math.rad(180), 0)  
        clone:SetPrimaryPartCFrame(hrp.CFrame * CFrame.new(0, -3.5, 0) * flatRotation)  

        for _, plot in pairs(workspace.Plots:GetChildren()) do  
            local target = plot:FindFirstChild("AnimalTarget", true)  
            if target and target:IsA("BasePart") then  
                local dist = (Vector3.new(clone.PrimaryPart.Position.X, 0, clone.PrimaryPart.Position.Z) -  
                             Vector3.new(target.Position.X, 0, target.Position.Z)).Magnitude  
                if dist < 5 then  
                    stopCarpet()  
                    return  
                end  
            end  
        end  
    end  
end)

end

--// Switch Toggle Logik
switch.MouseButton1Click:Connect(function()
carpetActive = not carpetActive
if carpetActive then
switch.BackgroundColor3 = Color3.fromRGB(3, 252, 48)
if not clone then
spawnClone()
end
startCarpet()
else
stopCarpet()
end
end)
        end
	end    
})



Tab:AddToggle({
	Name = "Aimbot (Web Slinger, LaserCape)",
	Default = false,
	Callback = function(state)
		local player = game:GetService("Players").LocalPlayer
        local Players = game:GetService("Players")
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local gui = player:FindFirstChild("PlayerGui"):FindFirstChild("AimbotGui")

        -- GUI vorhanden? Nur an/aus
        if gui then
            gui.Enabled = state
            return
        end

        if state then
-- ANTI-KICK & ANTI-REJOIN
local mt = getrawmetatable(game)
setreadonly(mt, false)
local oldNamecall = mt.__namecall
mt.__namecall = newcclosure(function(self, ...)
local method = getnamecallmethod()
if method == "Kick" then
warn("[AntiKick] Kick-Versuch blockiert!")
return
end
if tostring(self) == "TeleportToPlaceInstance" or tostring(self) == "Teleport" then
warn("[AntiRejoin] Teleport/Rejoin blockiert!")
return
end
return oldNamecall(self, ...)
end)
setreadonly(mt, true)


            gui = Instance.new("ScreenGui")
            gui.Name = "AimbotGui"
            gui.ResetOnSpawn = false
            gui.Enabled = true
            gui.Parent = player:WaitForChild("PlayerGui")

            local frame = Instance.new("Frame", gui)
            frame.Size = UDim2.new(0, 200, 0, 140)
            frame.Position = UDim2.new(1, -500, 0, 100)
            frame.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
            frame.Active = true
            frame.Draggable = true
            Instance.new("UICorner", frame).CornerRadius = UDim.new(0, 8)

            local titleLabel = Instance.new("TextLabel", frame)
            titleLabel.Size = UDim2.new(1, 0, 0, 25)
            titleLabel.Position = UDim2.new(0, 0, 0, 5)
            titleLabel.BackgroundTransparency = 1
            titleLabel.Font = Enum.Font.GothamBold
            titleLabel.TextSize = 18
            titleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
            titleLabel.Text = "Aimbot Controller"

            local aimbotActive = false
            local laserCapeAimbotActive = false

            local toolName = "Web Slinger"
            local laserCapeToolName = "Laser Cape"

            local maxRangeWeb = 30
            local maxRangeLaser = 60

            local function createToggleButton(yPos, label, getSetState)
                local button = Instance.new("TextButton", frame)
                button.Size = UDim2.new(1, -20, 0, 35)
                button.Position = UDim2.new(0, 10, 0, yPos)
                button.Font = Enum.Font.GothamBold
                button.TextSize = 16
                button.TextColor3 = Color3.fromRGB(255, 255, 255)

                local function updateColor()
                    local state = getSetState()
                    button.Text = label .. ": " .. (state and "ON" or "OFF")
                    button.BackgroundColor3 = state and Color3.fromRGB(0, 170, 0) or Color3.fromRGB(170, 0, 0)
                end

                button.MouseButton1Click:Connect(function()
                    getSetState(not getSetState())
                    updateColor()
                end)

                updateColor()
            end

            createToggleButton(35, "Web Slinger Aimbot", function(v)
                if v ~= nil then aimbotActive = v end
                return aimbotActive
            end)

            createToggleButton(80, "Laser Cape Aimbot", function(v)
                if v ~= nil then laserCapeAimbotActive = v end
                return laserCapeAimbotActive
            end)

            local function prepareTool(name)
                local requestBuy = ReplicatedStorage.Packages.Net:FindFirstChild("RF/CoinsShopService/RequestBuy")
                if requestBuy then
                    pcall(function() requestBuy:InvokeServer(name) end)
                end
            end


            local function getClosestTarget(maxRange)
                local char = player.Character
                if not char or not char:FindFirstChild("HumanoidRootPart") then return nil end

                local rootPos = char.HumanoidRootPart.Position
                local closest, shortest = nil, math.huge

                for _, p in ipairs(Players:GetPlayers()) do
                    if p ~= player and p.Character and p.Character:FindFirstChild("HumanoidRootPart") then
                        local hum = p.Character:FindFirstChildOfClass("Humanoid")
                        if hum and hum.Health > 0 then
                            local dist = (rootPos - p.Character.HumanoidRootPart.Position).Magnitude
                            if dist < shortest and dist <= maxRange then
                                shortest = dist
                                closest = p.Character.HumanoidRootPart
                            end
                        end
                    end
                end
                return closest
            end

            local function aimbotLoop(name, maxRange, isActive)
                task.spawn(function()
                    while task.wait(0.2) do
                        if isActive() then
                            local char = player.Character or player.CharacterAdded:Wait()
                            local backpack = player:WaitForChild("Backpack")
                       

                            -- Equip tool falls nicht aktiv
                            local tool = char:FindFirstChild(name) or backpack:FindFirstChild(name)
                            if not tool then
                                prepareTool(name)
                                tool = char:FindFirstChild(name) or backpack:FindFirstChild(name)
                            end
                            if tool and tool.Parent ~= char then
                                tool.Parent = char
                            end

                            local remote = ReplicatedStorage.Packages.Net:FindFirstChild("RE/UseItem")
                            if remote and tool then
                                local target = getClosestTarget(maxRange)
                                if target then
                                    remote:FireServer(target.Position, target)
                                    print("Geschossen auf:", target.Parent.Name)
                                end
                            end
                        end
                    end
                end)
            end

            aimbotLoop(toolName, maxRangeWeb, function() return aimbotActive end)
            aimbotLoop(laserCapeToolName, maxRangeLaser, function() return laserCapeAimbotActive end)
        end
	end    
})



Tab:AddToggle({
Name = "Manual Float",
Default = false,
Callback = function(state)
local player = game:GetService("Players").LocalPlayer
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local gui = player:FindFirstChild("PlayerGui"):FindFirstChild("DenjiPum")

-- GUI vorhanden? Nur an/aus  
    if gui then  
        gui.Enabled = state  
        return  
    end  

    if state then


--// Services
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")

local player = Players.LocalPlayer
local playerGui = player:WaitForChild("PlayerGui")
local character = player.Character or player.CharacterAdded:Wait()
local hrp = character:WaitForChild("HumanoidRootPart")
local humanoid = character:WaitForChild("Humanoid")

--========================
-- GUI SETUP
--========================
local screenGui = Instance.new("ScreenGui")
screenGui.Parent = playerGui



gui = Instance.new("ScreenGui")
			gui.Name = "H4xPum"
			gui.ResetOnSpawn = false
			gui.Enabled = false
			gui.Parent = playerGui



local button = Instance.new("TextButton")
button.Size = UDim2.new(0, 200, 0, 60)
button.Position = UDim2.new(0.4, 0, 0.8, 0)
button.Text = "H4x Hub\nScript"
button.TextColor3 = Color3.new(1,1,1)
button.Font = Enum.Font.SourceSansBold
button.TextScaled = true
button.BackgroundColor3 = Color3.new(0,0,0)
button.Parent = screenGui

local corner = Instance.new("UICorner")
corner.CornerRadius = UDim.new(0, 10)
corner.Parent = button

local progressBar = Instance.new("Frame")
progressBar.Size = UDim2.new(1, 0, 0.15, 0)
progressBar.Position = UDim2.new(0, 0, 1, 0)
progressBar.BackgroundColor3 = Color3.fromRGB(0,255,0)
progressBar.BorderSizePixel = 0
progressBar.Parent = button

local progressCorner = Instance.new("UICorner")
progressCorner.CornerRadius = UDim.new(0, 6)
progressCorner.Parent = progressBar

--========================
-- Einstellungen
--========================
local holdTime = 2.5      -- Sekunden bis die Leiste leer ist
local rechargeTime = 0.50    -- Sekunden bis sie sich wieder füllt
local running = false
local percent = 1
local platformPart = nil
local partConn = nil

--========================
-- FARB-LOGIK
--========================
local function updateColors()
local color
if percent > 0.6 then
color = Color3.fromRGB(0,255,0) -- Grün
elseif percent > 0.2 then
color = Color3.fromRGB(255,255,0) -- Gelb
else
color = Color3.fromRGB(255,0,0) -- Rot
end

-- Progress-Bar einfärben  
progressBar.BackgroundColor3 = color  

-- Part einfärben (falls existiert)  
if platformPart then  
    platformPart.Color = color  
end

end

--========================
-- PART FUNKTION
--========================
local function enablePart()
if not platformPart then
platformPart = Instance.new("Part")
platformPart.Size = Vector3.new(6,1,6)
platformPart.Anchored = true
platformPart.CanCollide = true
platformPart.Color = Color3.fromRGB(0,255,0)
platformPart.Parent = workspace

partConn = RunService.Heartbeat:Connect(function()  
        if hrp and platformPart then  
            platformPart.Position = hrp.Position - Vector3.new(0,3,0)  
            updateColors()  
        end  
    end)  
end

end

local function disablePart()
if partConn then partConn:Disconnect(); partConn=nil end
if platformPart then platformPart:Destroy(); platformPart=nil end
end

--========================
-- BUTTON HANDLER
--========================
button.MouseButton1Down:Connect(function()
if running or percent <= 0 then return end
running = true
enablePart()

while running and percent > 0 do  
    percent = math.clamp(percent - (1 / (holdTime * 10)), 0, 1)  
    progressBar.Size = UDim2.new(percent, 0, 0.15, 0)  
    updateColors()  
    task.wait(0.1)  
end  

disablePart()  
running = false

end)

button.MouseButton1Up:Connect(function()
running = false
disablePart()

while not running and percent < 1 do  
    percent = math.clamp(percent + (1 / (rechargeTime * 10)), 0, 1)  
    progressBar.Size = UDim2.new(percent, 0, 0.15, 0)  
    updateColors()  
    task.wait(0.1)  
end

end)
end
end
})




local player = game.Players.LocalPlayer
local toggleActive = false
local debounce = false

-- Resetbare Countdown-Texte
local resetableCountdowns = {
    ["0s"] = true,
    ["1s"] = true,
    ["2s"] = true,
    ["3s"] = true,
    ["4s"] = true
}

local plots = workspace:WaitForChild("Plots")
local myPlot = nil
local myHitbox = nil
local countdownLabel = nil

-- Finde den eigenen Plot anhand des Namens/DisplayNamens
do
    local userLower = string.lower(player.Name)
    local displayLower = string.lower(player.DisplayName)
    for _, model in ipairs(plots:GetChildren()) do
        if model:IsA("Model") then
            for _, obj in ipairs(model:GetDescendants()) do
                if obj:IsA("TextLabel") then
                    local txt = string.lower(obj.Text)
                    if string.find(txt, userLower, 1, true) 
                    or string.find(txt, displayLower, 1, true) then
                        myPlot = model
                        break
                    end
                end
            end
            if myPlot then break end
        end
    end
end

-- Speichere Hitbox und CountdownLabel
if myPlot then
    local purchases = myPlot:WaitForChild("Purchases")
    local plotBlock = purchases:WaitForChild("PlotBlock")
    myHitbox = plotBlock:WaitForChild("Hitbox")

    -- suche CountdownLabel im Plot
    for _, obj in ipairs(purchases:GetDescendants()) do
        if obj:IsA("TextLabel") and obj.Name == "RemainingTime" then
            countdownLabel = obj
            break
        end
    end
end

-- Funktion: laufe exakt zum eigenen PlotBlock
local function walkToMyPlot()
    local char = player.Character or player.CharacterAdded:Wait()
    local hrp = char:WaitForChild("HumanoidRootPart")
    local hum = char:WaitForChild("Humanoid")

    if not (hum and hrp and myHitbox) then return end

    local targetPos = myHitbox.Position + Vector3.new(0, 2, 0) -- leicht drÃ¼ber
    hum:MoveTo(targetPos)
    hum.MoveToFinished:Wait()

    if (hrp.Position - targetPos).Magnitude > 3 then
        hum:MoveTo(targetPos)
        hum.MoveToFinished:Wait()
    end
end

-- Hauptloop
local function monitorLoop()
    while true do
        task.wait(0.2)

        if toggleActive and not debounce and countdownLabel and myHitbox then
            if resetableCountdowns[countdownLabel.Text] then
                debounce = true

                -- Respawn fÃ¼r sichere Position
                local char = player.Character or player.CharacterAdded:Wait()
                local hum = char:FindFirstChildOfClass("Humanoid")
                if hum then
                    hum.Health = 0
                end

                task.spawn(function()
                    local newChar = player.CharacterAdded:Wait()
                    newChar:WaitForChild("HumanoidRootPart")
                    task.wait(0.5)

                    walkToMyPlot()

                    task.wait(6) -- kurze Pause, bevor wieder mÃ¶glich
                    debounce = false
                end)
            end
        end
    end
end

task.spawn(monitorLoop)



--// Services
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local LocalPlayer = Players.LocalPlayer
local infiniteJumpEnabled = false

--// Settings
local infiniteJumpMin = 45
local infiniteJumpMax = 50
local jumpCooldown = 0.1


--// State
local lastJumpTime = 0
local character, humanoid, rootPart
local boostConnection = nil

--// Rebinds character on spawn/reset
local function bindCharacter(char)
	character = char
	humanoid = char:WaitForChild("Humanoid")
	rootPart = char:WaitForChild("HumanoidRootPart")
	local jumping = false

	-- Clear old connection
	if boostConnection then
		boostConnection:Disconnect()
	end

	-- Jump Boost logic (trigger on jump state)
	boostConnection = humanoid.StateChanged:Connect(function(_, new)
		if new == Enum.HumanoidStateType.Jumping and not jumping and jumpBoostEnabled then
			jumping = true

			RunService.RenderStepped:Wait()
			if rootPart and rootPart.Parent then
				local currentVel = rootPart.Velocity
				rootPart.Velocity = currentVel + Vector3.new(0, jumpBoostForce, 0)
			end

			task.delay(0.2, function()
				jumping = false
			end)
		end
	end)
end

--// Initial bind
if LocalPlayer.Character then
	bindCharacter(LocalPlayer.Character)
end

--// Rebind on respawn
LocalPlayer.CharacterAdded:Connect(function(char)
	bindCharacter(char)
end)


--// Infinite Jump: Trigger on JumpRequest
UserInputService.JumpRequest:Connect(function()
	if not infiniteJumpEnabled then return end
	if not humanoid or not rootPart then return end
	if tick() - lastJumpTime < jumpCooldown then return end

	local state = humanoid:GetState()
	if state == Enum.HumanoidStateType.Freefall or state == Enum.HumanoidStateType.Running or state == Enum.HumanoidStateType.Jumping then
		local boost = math.random(infiniteJumpMin * 10, infiniteJumpMax * 10) / 10
		rootPart.Velocity = Vector3.new(rootPart.Velocity.X, boost, rootPart.Velocity.Z)
		lastJumpTime = tick()
	end
end)



Tab:AddToggle({
	Name = "Infinite Jump",
	Default = true,
	Callback = function(state)
		infiniteJumpEnabled = state
	end    
})



local visualSpeed = 25 -- feste Geschwindigkeit

Tab:AddToggle({
    Name = "Speed Boost",
    Default = false,
    Callback = function(Value)
        speedEnabled = Value  -- globale Variable aus dem Ruma Script

        if speedEnabled then
            print("Speed Boost aktiviert")
            
            -- Boost starten
            if boostConn then boostConn:Disconnect() end
            boostConn = RunService.Heartbeat:Connect(function()
                local dir = humanoid.MoveDirection
                if dir.Magnitude > 0 then
                    local v = hrp.Velocity
                    local horiz = Vector3.new(dir.X, 0, dir.Z).Unit * visualSpeed
                    hrp.Velocity = Vector3.new(horiz.X, v.Y, horiz.Z)
                end
            end)
        else
            print("Speed Boost deaktiviert")
            
            -- Boost stoppen
            if boostConn then
                boostConn:Disconnect()
                boostConn = nil
            end
        end
    end
})




local Section = Tab:AddSection({
	Name = "MyBase Section"
})


Tab:AddToggle({
	Name = "Auto Lock Base",
	Default = false,
	Callback = function(Value)
		toggleActive = Value
	end    
})




local function findMyPlot()
    local plots = workspace:FindFirstChild("Plots")
    if not plots then return end
    for _, plot in ipairs(plots:GetChildren()) do
        local sign = plot:FindFirstChild("PlotSign")
        if sign and sign:FindFirstChild("YourBase") and sign.YourBase.Enabled then
            return plot
        end
    end
end

local function getRemainingSeconds(plot)
    for _, obj in ipairs(plot:GetDescendants()) do
        if obj:IsA("TextLabel") and obj.Name == "RemainingTime" and obj.Visible then
            local seconds = tonumber(obj.Text:match("(%d+)"))
            return seconds
        end
    end
end



local alarm
local lockReminderEnabled = false

local function CreateAlarm()
    if not alarm then
        alarm = Instance.new("Sound")
        alarm.SoundId = "rbxassetid://2979857617"
        alarm.Volume = 1.3
        alarm.Looped = true
        alarm.Parent = workspace
    end
end



Tab:AddToggle({
	Name = "Auto Reminder",
	Default = false,
	Callback = function(state)
		lockReminderEnabled = state
        if state then
            CreateAlarm()
        elseif alarm then
            alarm:Stop()
            alarm:Destroy()
            alarm = nil
        end
	end    
})



task.spawn(function()
    while true do
        if lockReminderEnabled then
            local plot = findMyPlot()
            if plot then
                local remaining = getRemainingSeconds(plot)
                if remaining then
                    if remaining <= 10 then
                        game.StarterGui:SetCore("SendNotification", {
                            Title = "BASE REMINDER",
                            Text = "10 Seconds Left!",
                            Icon = "alert-triangle", -- Beispiel
                            Duration = 5,
                        })
                        if alarm and not alarm.IsPlaying then
                            alarm:Play()
                        end
                    else
                        if alarm and alarm.IsPlaying then
                            alarm:Stop()
                        end
                    end
                else
                    game.StarterGui:SetCore("SendNotification", {
                        Title = "Base Unlocked",
                        Text = "Successfully Unlocked",
                        Icon = "rbxassetid://11157772247",
                        Duration = 5,
                    })
                    if alarm and alarm.IsPlaying then
                        alarm:Stop()
                    end
                end
            else
                game.StarterGui:SetCore("SendNotification", {
                    Title = "BASE REMINDER",
                    Text = "Searching for base...",
                    Icon = "rbxassetid://5107150301",
                    Duration = 5,
                })
                if alarm and not alarm.IsPlaying then
                    alarm:Play()
                end
            end
        end
        task.wait(1)
    end
end)




local Section = Tab2:AddSection({
	Name = "Steal Helper"
})



-- RarityPets Tabelle (komplett)
local RarityPets = {
    Common = {"Noobini Pizzanini", "Fluriflura", "Lirilì Larilà", "Pipi Kiwi", "Pipi Corny", "Svinina Bombardino", "Talpa Di Fero", "Tim Cheese"},
    Rare = {"Bandito Bobritto", "Boneca Ambalabu", "Cacto Hipopotamo", "Gangster Footera", "Ta Ta Ta Ta Sahur", "Tric Trac Baraboom", "Trippi Troppi", "Tung Tung Tung Sahur"},
    Epic = {"Penguino Cocosino", "Salamino Penguino", "Avocadini Guffo","Bambini Crostini","Bananaita Dolphinita","Brr Brr Patapim", "Brri Brri Dicus Bombicus", "Cappuccino Assasino","Perochello Lemonchello","Trulimero Trulicina"},
    Mythic = {"Tracoducotulu Delapeladustuz", "Tob Tobi Tobi", "Ganganzelli Trulala", "Bombardiro Crocodilo", "Bombombini Gusini", "Cavallo Virtuoso", "Frigo Camelo", "Mythic Lucky Block", "Orangutini Ananassini", "Rhino Toasterino", "Spioniro Golubiro", "Tigrilini Watermelini", "Zibra Zubra Zibralini", "Lerulerulerule", "Carloo"},
    Legendary = {"Ballerina Cappuccina", "Blueberrinni Octopusini", "Burbaloni Loliloli", "Strawberry Flamingelli","Pipi Potato","Cocosini Mama","Pandaccini Bananini","Pi Pi Watermelon","Sigma Boy", "Chef Crabracadabra", "Chimpanzini Bananini", "Glorbo Fruttodrillo", "Lionel Cactuseli", "Pandaccini Bananini"},
    ["Brainrot God"] = {"Tralalero Tralala", "Tralalita tralala", "Bulbito Bandito Traktorito", "Unclito Samito", "Alessio", "Urubini Flamenguini", "Pakrahmatmamat", "Brr es Teh Patipum", "Tartarauga Cisterna", "Ballerino Lololo", "Tipi Topi Taco", "Espresso Signora", "Gattatino Neonino", "Los Orcalitos", "Los Crocodillitos", "Los Bombinitos", "Piccione Macchina", "Tukanno Bananno","Trippy Troppi Troppa Trippa", "Los Tungtungtungcitos", "Brainrot God Lucky Block", "Cocofanto Elefanto", "Girafa Celestre", "Matteo", "Odin Din Din Dun", "Orcalero Orcala", "Statutino Libertino", "Tigroligre Frutooni", "Trenostruzzo Turbo 3000"},
    Secret = {"Bisonte Giuppitere", "Dul Dul Dul", "Blackhole Goat", "Los Spyderinis", "Ketupat Kepat", "Karkerkar Kurkur", "Los Matteos", "Esok Sekolah", "Los Hotspotsitos", "Garama and Madundung", "Las Vaquitas Saturnitas", "Nuclearo Dinossauro", "Chimpanzini Spiderini", "Graipuss Medussi", "La Grande Combinasion", "La Supreme Combinasion", "Agarrini la Palini","Dragon Cannelloni","Los Combinasionas", "La Vacca Saturno Saturnita", "Las Tralaleritas", "Los Tralaleritos", "Pot Hotspot", "Secret Lucky Block", "Torrtugini Dragonfrutini"}
}

-- Lock Timer Paragraph
local plotName
for _, plot in ipairs(workspace.Plots:GetChildren()) do
    if plot:FindFirstChild("YourBase", true).Enabled then
        plotName = plot.Name
        break
    end
end

local remainingTimeLabel = workspace.Plots[plotName].Purchases.PlotBlock.Main.BillboardGui.RemainingTime
local TimerParagraph = Tab2:AddParagraph("Lock Time: ", "Timer Paragraph")

task.spawn(function()
    while true do
        local t = remainingTimeLabel.Text
        TimerParagraph:Set("".. t, "")
        task.wait(0.25)
    end
end)

-- Alle Pets in Brainrot Dropdown
local allPets = {}
for _, pets in pairs(RarityPets) do
    for _, pet in ipairs(pets) do
        table.insert(allPets, pet)
    end
end

local selectedPets = {}
local SelectBrainrot = Tab2:AddDropdown({
    Name = "Select Brainrot",
    Default = {},
    Options = allPets,
    Multi = true,
    Callback = function(values)
        selectedPets = {}
        for _, petName in ipairs(values) do
            selectedPets[petName] = true
        end
    end
})

-- Toggles
local AutoStealEnabled = false
local AutoStealAllEnabled = false
local kickEnabled = false
local promptTriggered = false

Tab2:AddToggle({Name="StealToggle", Default=false, Callback=function(v) _G.AutoStealEnabled = v end})
Tab2:AddToggle({Name="StealAllToggle", Default=false, Callback=function(v) _G.AutoStealAllEnabled = v end})
Tab2:AddToggle({Name="KickToggle", Default=false, Callback=function(v) kickEnabled=v promptTriggered=false end})

-- Steal Function
local function Steal()
    local player = game.Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()

    for _, prompt in pairs(workspace:GetDescendants()) do
        if prompt:IsA("ProximityPrompt") and prompt.ActionText=="Steal" then
            local petName = prompt.ObjectText
            if selectedPets[petName] then
                local attachment = prompt.Parent
                if attachment and attachment:IsA("Attachment") then
                    local pos = attachment.WorldPosition
                    local distance = (character.HumanoidRootPart.Position - pos).Magnitude
                    if distance <= 20 then
                        prompt:InputHoldBegin()
                    end
                end
            end
        end
    end
end

-- Steal All Function
local function StealAll()
    local player = game.Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()

    for _, prompt in pairs(workspace:GetDescendants()) do
        if prompt:IsA("ProximityPrompt") and prompt.ActionText=="Steal" and prompt.ObjectText ~= nil then
            local attachment = prompt.Parent
            if attachment and attachment:IsA("Attachment") then
                local pos = attachment.WorldPosition
                local distance = (character.HumanoidRootPart.Position - pos).Magnitude
                if distance <= 20 then
                    prompt:InputHoldBegin()
                end
            end
        end
    end
end

-- AutoSteal Loops
task.spawn(function()
    while true do
        if _G.AutoStealEnabled then pcall(Steal) end
        task.wait(0.5)
    end
end)

task.spawn(function()
    while true do
        if _G.AutoStealAllEnabled then pcall(StealAll) end
        task.wait(0.5)
    end
end)



local Section = Tab3:AddSection({
	Name = "Purchase Moving Animals"
})


--// Services
local TweenService = game:GetService("TweenService")
local Players = game:GetService("Players")
local Player = Players.LocalPlayer
local currentTween

--// Alle Pets nach Rarities
local RarityPets = {
    Common = {"Noobini Pizzanini", "Fluriflura", "Lirilì Larilà", "Pipi Kiwi", "Pipi Corny", "Svinina Bombardino", "Talpa Di Fero", "Tim Cheese"},
    Rare = {"Bandito Bobritto", "Boneca Ambalabu", "Cacto Hipopotamo", "Gangster Footera", "Ta Ta Ta Ta Sahur", "Tric Trac Baraboom", "Trippi Troppi", "Tung Tung Tung Sahur"},
    Epic = {"Penguino Cocosino", "Salamino Penguino", "Avocadini Guffo","Bambini Crostini","Bananaita Dolphinita","Brr Brr Patapim", "Brri Brri Dicus Bombicus", "Cappuccino Assasino","Perochello Lemonchello","Trulimero Trulicina"},
    Mythic = {"Tracoducotulu Delapeladustuz", "Tob Tobi Tobi", "Ganganzelli Trulala", "Bombardiro Crocodilo", "Bombombini Gusini", "Cavallo Virtuoso", "Frigo Camelo", "Mythic Lucky Block", "Orangutini Ananassini", "Rhino Toasterino", "Spioniro Golubiro", "Tigrilini Watermelini", "Zibra Zubra Zibralini", "Lerulerulerule", "Carloo"},
    Legendary = {"Ballerina Cappuccina", "Blueberrinni Octopusini", "Burbaloni Loliloli", "Strawberry Flamingelli","Pipi Potato","Cocosini Mama","Pandaccini Bananini","Pi Pi Watermelon","Sigma Boy", "Chef Crabracadabra", "Chimpanzini Bananini", "Glorbo Fruttodrillo", "Lionel Cactuseli", "Pandaccini Bananini"},
    ["Brainrot God"] = {"Tralalero Tralala", "Tralalita tralala", "Bulbito Bandito Traktorito", "Unclito Samito", "Alessio", "Urubini Flamenguini", "Pakrahmatmamat", "Brr es Teh Patipum", "Tartarauga Cisterna", "Ballerino Lololo", "Tipi Topi Taco", "Espresso Signora", "Gattatino Neonino", "Los Orcalitos", "Los Crocodillitos", "Los Bombinitos", "Piccione Macchina", "Tukanno Bananno","Trippy Troppi Troppa Trippa", "Los Tungtungtungcitos", "Brainrot God Lucky Block", "Cocofanto Elefanto", "Girafa Celestre", "Matteo", "Odin Din Din Dun", "Orcalero Orcala", "Statutino Libertino", "Tigroligre Frutooni", "Trenostruzzo Turbo 3000"},
    Secret = {"Bisonte Giuppitere", "Dul Dul Dul", "Blackhole Goat", "Los Spyderinis", "Ketupat Kepat", "Karkerkar Kurkur", "Los Matteos", "Esok Sekolah", "Los Hotspotsitos", "Garama and Madundung", "Las Vaquitas Saturnitas", "Nuclearo Dinossauro", "Chimpanzini Spiderini", "Graipuss Medussi", "La Grande Combinasion", "La Supreme Combinasion", "Agarrini la Palini","Dragon Cannelloni","Los Combinasionas", "La Vacca Saturno Saturnita", "Las Tralaleritas", "Los Tralaleritos", "Pot Hotspot", "Secret Lucky Block", "Torrtugini Dragonfrutini"}
}

--// Variablen
local selectedPets = {}
local autoFarmEnabled = false
local selectedFarmMode = "Tween"
local antiResetEnabled = false

--// Alle Pets in eine Liste packen
local allPets = {}
for _, pets in pairs(RarityPets) do
    for _, pet in ipairs(pets) do
        table.insert(allPets, pet)
    end
end

--// Orion UI Elemente
local SelectBrainrot = Tab3:AddDropdown({
    Name = "Select Brainrot",
    Default = {},
    Options = allPets,
    Multi = true,
    Callback = function(values)
        selectedPets = {}
        for _, petName in ipairs(values) do
            selectedPets[petName] = true
        end
    end
})

Tab3:AddDropdown({
    Name = "Select Collect Method",
    Default = "Tween",
    Options = {"Tween", "Walk"},
    Callback = function(v)
        selectedFarmMode = v
    end
})

Tab3:AddToggle({
    Name = "Auto Farm",
    Default = false,
    Callback = function(v)
        autoFarmEnabled = v
    end
})

--// Anti Reset
local function enableAntiReset()
    if antiResetEnabled then return end
    antiResetEnabled = true

    local char = Player.Character or Player.CharacterAdded:Wait()
    local hum = char:FindFirstChildOfClass("Humanoid")
    if hum then
        hum.BreakJointsOnDeath = false
        hum:GetPropertyChangedSignal("Health"):Connect(function()
            if hum.Health < 101 then
                hum.Health = 100
            end
        end)
    end
end

--// Farm Loop
task.spawn(function()
    while true do
        task.wait(0.2)
        if autoFarmEnabled then
            enableAntiReset()

            local renderedContainer = workspace:FindFirstChild("RenderedMovingAnimals")
            if renderedContainer then
                for _, petModel in ipairs(renderedContainer:GetChildren()) do
                    if petModel:IsA("Model") and selectedPets[petModel.Name] then
                        local rp = petModel:FindFirstChild("RootPart") or petModel:FindFirstChild("FakeRootPart")
                        local char = Player.Character
                        if rp and char and char:FindFirstChild("HumanoidRootPart") then
                            local hrp = char.HumanoidRootPart
                            local hum = char:FindFirstChildOfClass("Humanoid")
                            local dist = (hrp.Position - rp.Position).Magnitude

                            -- Bewegung
                            if selectedFarmMode == "Tween" then
                                if not currentTween then
                                    local tweenInfo = TweenInfo.new(dist / 35, Enum.EasingStyle.Linear)
                                    currentTween = TweenService:Create(hrp, tweenInfo, {CFrame = rp.CFrame})
                                    currentTween:Play()
                                    currentTween.Completed:Connect(function()
                                        currentTween = nil
                                    end)
                                end
                            elseif selectedFarmMode == "Walk" and hum then
                                hum:MoveTo(rp.Position)
                            end

                            -- Kaufen wenn nah genug dran
                            if dist <= 8 then
                                local prompt = petModel:FindFirstChildOfClass("ProximityPrompt")
                                if prompt then
                                    prompt:InputHoldBegin()
                                end
                            end
                        end
                    end
                end
            end
        end
    end
end)



local Section = Tab4:AddSection({
	Name = "ESP Toggles"
})


-- Player ESP
local HttpService = game:GetService("HttpService")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local TeleportService = game:GetService("TeleportService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local TweenService = game:GetService("TweenService")
local CoreGui = game:GetService("CoreGui")


local playerESPEnabled = false


local ESPFolder = Instance.new("Folder")
ESPFolder.Name = "PlayerESP"
ESPFolder.Parent = CoreGui

local function CreatePlayerESP(player)
    if player == LocalPlayer or ESPFolder:FindFirstChild(player.Name) then return end
    local character = player.Character
    if not character or not character:FindFirstChild("Head") then return end
    local container = Instance.new("Folder")
    container.Name = player.Name
    container.Parent = ESPFolder
    local highlight = Instance.new("Highlight")
    highlight.Adornee = character
    highlight.FillColor = Color3.fromRGB(255, 255, 0)
    highlight.OutlineColor = Color3.fromRGB(255, 0, 0)
    highlight.FillTransparency = 0.3
    highlight.OutlineTransparency = 0
    highlight.Parent = container
    local billboard = Instance.new("BillboardGui")
    billboard.Name = "NameTag"
    billboard.Adornee = character:FindFirstChild("Head")
    billboard.Size = UDim2.new(0, 100, 0, 20)
    billboard.StudsOffset = Vector3.new(0, 2.5, 0)
    billboard.AlwaysOnTop = true
    billboard.Parent = container
    local nameLabel = Instance.new("TextLabel")
    nameLabel.Size = UDim2.new(1, 0, 1, 0)
    nameLabel.BackgroundTransparency = 1
    nameLabel.Text = player.Name
    nameLabel.TextColor3 = Color3.fromRGB(255, 255, 0)
    nameLabel.TextStrokeTransparency = 0
    nameLabel.Font = Enum.Font.GothamBold
    nameLabel.TextScaled = true
    nameLabel.Parent = billboard
    for _, part in ipairs(character:GetDescendants()) do
        if part:IsA("BasePart") then
            local box = Instance.new("BoxHandleAdornment")
            box.Name = "ESP_" .. part.Name
            box.Adornee = part
            box.Size = part.Size
            box.AlwaysOnTop = true
            box.ZIndex = 0
            box.Color3 = Color3.fromRGB(255, 0, 0)
            box.Transparency = 0.2
            box.Parent = container
        end
    end
end

local function UpdatePlayerESP()
    if not playerESPEnabled then
        ESPFolder:ClearAllChildren()
        return
    end
    for _, p in ipairs(Players:GetPlayers()) do
        if p ~= LocalPlayer then
            CreatePlayerESP(p)
        end
    end
end

Players.PlayerRemoving:Connect(function(player)
    local esp = ESPFolder:FindFirstChild(player.Name)
    if esp then esp:Destroy() end
end)

Players.PlayerAdded:Connect(function(p)
    p.CharacterAdded:Connect(function()
        task.wait(1)
        if playerESPEnabled then CreatePlayerESP(p) end
    end)
end)

RunService.Heartbeat:Connect(UpdatePlayerESP)


Tab4:AddToggle({
	Name = "Highlight Players",
	Default = false,
	Callback = function(state)
		playerESPEnabled = state
        if not state then
            ESPFolder:ClearAllChildren()
        end
	end    
})


Tab4:AddToggle({
	Name = "Highlight Plot Timers",
	Default = false,
	Callback = function(state)
		 SAB.BigPlotTimers:Toggle(state)
	end    
})


local Section = Tab3:AddSection({
	Name = "Buy Items/Tools"
})




-- Funktion zum Kaufen
local function buyItem(itemName)
    local success, err = pcall(function()
        local args = { itemName }
        game:GetService("ReplicatedStorage"):WaitForChild("Packages")
        :WaitForChild("Net")
        :WaitForChild("RF/CoinsShopService/RequestBuy")
        :InvokeServer(unpack(args))
    end)

    if success then  
        game.StarterGui:SetCore("SendNotification", {
            Title = "Purchase Successful",
            Text = "You have purchased: " .. itemName,
            Icon = "rbxassetid://11157772247", -- Beispiel-Icon (Alert Triangle)
            Duration = 5
        })
    else  
        game.StarterGui:SetCore("SendNotification", {
            Title = "Purchase Failed",
            Text = "Could not purchase: " .. itemName .. "\n" .. tostring(err),
            Icon = "rbxassetid://5107150301", -- Beispiel-Icon
            Duration = 5
        })
    end
end

-- Shop-Buttons mit neuem AddButton-System
Tab3:AddButton({
    Name = "Trap",
    Callback = function() buyItem("Trap") end
})

Tab3:AddButton({
    Name = "Medusa's Head",
    Callback = function() buyItem("Medusa's Head") end
})

Tab3:AddButton({
    Name = "Web Slinger",
    Callback = function() buyItem("Web Slinger") end
})

Tab3:AddButton({
    Name = "Quantum Cloner",
    Callback = function() buyItem("Quantum Cloner") end
})

Tab3:AddButton({
    Name = "All Seeing Sentry",
    Callback = function() buyItem("All Seeing Sentry") end
})

Tab3:AddButton({
    Name = "Rainbowrath Sword",
    Callback = function() buyItem("Rainbowrath Sword") end
})

Tab3:AddButton({
    Name = "Laser Cape",
    Callback = function() buyItem("Laser Cape") end
})

Tab3:AddButton({
    Name = "Rage Table",
    Callback = function() buyItem("Rage Table") end
})

Tab3:AddButton({
    Name = "Coil Combo",
    Callback = function() buyItem("Coil Combo") end
})

Tab3:AddButton({
    Name = "Invisibility Cloak",
    Callback = function() buyItem("Invisibility Cloak") end
})

Tab3:AddButton({
    Name = "Body Swap Potion",
    Callback = function() buyItem("Body Swap Potion") end
})



local Section = Tab5:AddSection({
	Name = "Webhook Management"
})


--// Services
local HttpService = game:GetService("HttpService")
local Workspace = game:GetService("Workspace")
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")

--// Request function
local requestFunc = http_request or request or (syn and syn.request) or (fluxus and fluxus.request)
if not requestFunc then
    warn("No request function available. Webhook sending won't work.")
end

--// Config
local Config = {
    Webhook = "",
    DiscordId = 0,
    SendEmbed = false,
    SendEveryone = false,
    SelectedMethod = "", -- "Spawned Brainrots" or "Current Server"
    SelectedPets = {}
}

local alreadySent = {}
local currentConn

--// Pet Listen
local RarityPets = {
    Common = {"Noobini Pizzanini", "Fluriflura", "Lirilì Larilà", "Pipi Kiwi", "Pipi Corny", "Svinina Bombardino", "Talpa Di Fero", "Tim Cheese"},
    Rare = {"Bandito Bobritto", "Boneca Ambalabu", "Cacto Hipopotamo", "Gangster Footera", "Ta Ta Ta Ta Sahur", "Tric Trac Baraboom", "Trippi Troppi", "Tung Tung Tung Sahur"},
    Epic = {"Penguino Cocosino", "Salamino Penguino", "Avocadini Guffo","Bambini Crostini","Bananaita Dolphinita","Brr Brr Patapim", "Brri Brri Dicus Bombicus", "Cappuccino Assasino","Perochello Lemonchello","Trulimero Trulicina"},
    Mythic = {"Tracoducotulu Delapeladustuz", "Tob Tobi Tobi", "Ganganzelli Trulala", "Bombardiro Crocodilo", "Bombombini Gusini", "Cavallo Virtuoso", "Frigo Camelo", "Mythic Lucky Block", "Orangutini Ananassini", "Rhino Toasterino", "Spioniro Golubiro", "Tigrilini Watermelini", "Zibra Zubra Zibralini", "Lerulerulerule", "Carloo"},
    Legendary = {"Ballerina Cappuccina", "Blueberrinni Octopusini", "Burbaloni Loliloli", "Strawberry Flamingelli","Pipi Potato","Cocosini Mama","Pandaccini Bananini","Pi Pi Watermelon","Sigma Boy", "Chef Crabracadabra", "Chimpanzini Bananini", "Glorbo Fruttodrillo", "Lionel Cactuseli", "Pandaccini Bananini"},
    ["Brainrot God"] = {"Tralalero Tralala", "Tralalita tralala", "Bulbito Bandito Traktorito", "Unclito Samito", "Alessio", "Urubini Flamenguini", "Pakrahmatmamat", "Brr es Teh Patipum", "Tartarauga Cisterna", "Ballerino Lololo", "Tipi Topi Taco", "Espresso Signora", "Gattatino Neonino", "Los Orcalitos", "Los Crocodillitos", "Los Bombinitos", "Piccione Macchina", "Tukanno Bananno","Trippy Troppi Troppa Trippa", "Los Tungtungtungcitos", "Brainrot God Lucky Block", "Cocofanto Elefanto", "Girafa Celestre", "Matteo", "Odin Din Din Dun", "Orcalero Orcala", "Statutino Libertino", "Tigroligre Frutooni", "Trenostruzzo Turbo 3000"},
    Secret = {"Bisonte Giuppitere", "Dul Dul Dul", "Blackhole Goat", "Los Spyderinis", "Ketupat Kepat", "Karkerkar Kurkur", "Los Matteos", "Esok Sekolah", "Los Hotspotsitos", "Garama and Madundung", "Las Vaquitas Saturnitas", "Nuclearo Dinossauro", "Chimpanzini Spiderini", "Graipuss Medussi", "La Grande Combinasion", "La Supreme Combinasion", "Agarrini la Palini","Dragon Cannelloni","Los Combinasionas", "La Vacca Saturno Saturnita", "Las Tralaleritas", "Los Tralaleritos", "Pot Hotspot", "Secret Lucky Block", "Torrtugini Dragonfrutini"}
}

-- Alle Pets in eine Liste packen
local allPets, seen = {}, {}
for _, petList in pairs(RarityPets) do
    for _, pet in ipairs(petList) do
        if not seen[pet] then
            table.insert(allPets, pet)
            seen[pet] = true
        end
    end
end

--// Webhook Funktionen
local function sendWebhook(name, price, rarity, mutation, mps)
    if Config.Webhook == "" then return end
    if not mutation or mutation == "" then mutation = "No Mutation" end

    local content
    if Config.SendEveryone then
        content = "@everyone ✅ Successfully Sent SAB Notify"
    elseif Config.DiscordId ~= 0 then
        content = "<@" .. tostring(Config.DiscordId) .. ">"
    else
        content = "✅ Successfully Sent SAB Notify"
    end

    local embed = {
        title = "🧠 Brainrot has Spawned | " .. name,
        color = 0xff4080,
        fields = {
            { name = "🏷 Name", value = name, inline = true },
            { name = "🧬 Mutation", value = mutation, inline = true },
            { name = "📈 Generation", value = mps, inline = true },
            { name = "🌟 Brainrot Rarity", value = rarity, inline = true },
        },
        footer = { text = "Made by H4X • Today at " .. os.date("%I:%M %p") }
    }

    requestFunc({
        Url = Config.Webhook,
        Method = "POST",
        Headers = { ["Content-Type"] = "application/json" },
        Body = HttpService:JSONEncode({ content = content, embeds = { embed } })
    })
end


-- Scan Funktionen
local function scanSpawner()
    local moving = Workspace:FindFirstChild("MovingAnimals")
    if not moving then return end
    for _, model in pairs(moving:GetChildren()) do
        if model:IsA("Model") then
            local nameLabel = model:FindFirstChildWhichIsA("BillboardGui", true)
            if nameLabel and nameLabel:FindFirstChild("DisplayName") then
                local name = nameLabel.DisplayName.Text
                if Config.SelectedPets[name] and not alreadySent[name] then
                    alreadySent[name] = true
                    local rarity = nameLabel:FindFirstChild("Rarity") and nameLabel.Rarity.Text or "Unknown"
                    local mutationLabel = model:FindFirstChild("Mutation", true)
                    local mutation = (mutationLabel and mutationLabel:IsA("TextLabel") and mutationLabel.Text ~= "") and mutationLabel.Text or "None"
                    local price = nameLabel:FindFirstChild("Price") and nameLabel.Price.Text or "Unknown"
                    local mps = nameLabel:FindFirstChild("Generation") and nameLabel.Generation.Text or "Unknown"
                    sendWebhook(name, price, rarity, mutation, mps)
                end
            end
        end
    end
end

local function scanBases()
    local plots = Workspace:FindFirstChild("Plots")
    if not plots then return end
    for _, plot in pairs(plots:GetChildren()) do
        if plot:IsA("Model") and plot:FindFirstChild("AnimalPodiums") then
            for _, podium in pairs(plot.AnimalPodiums:GetChildren()) do
                if podium:IsA("Model") then
                    local overhead = podium:FindFirstChildWhichIsA("BillboardGui", true)
                    if overhead and overhead:FindFirstChild("DisplayName") then
                        local name = overhead.DisplayName.Text
                        local uniqueId = plot.Name .. podium.Name
                        if Config.SelectedPets[name] and not alreadySent[uniqueId] then
                            alreadySent[uniqueId] = true
                            local rarity = overhead:FindFirstChild("Rarity") and overhead.Rarity.Text or "Unknown"
                            local mutationLabel = podium:FindFirstChild("Mutation", true)
                            local mutation = (mutationLabel and mutationLabel:IsA("TextLabel") and mutationLabel.Text ~= "") and mutationLabel.Text or "None"
                            local price = overhead:FindFirstChild("Price") and overhead.Price.Text or "Unknown"
                            local mps = overhead:FindFirstChild("Generation") and overhead.Generation.Text or "Unknown"
                            sendWebhook(name, price, rarity, mutation, mps)
                        end
                    end
                end
            end
        end
    end
end

-- Start Scan
local function startScan()
    if currentConn then currentConn:Disconnect() end
    alreadySent = {}
    currentConn = RunService.Heartbeat:Connect(function()
        if Config.SelectedMethod == "Spawned Brainrots" and Config.SendEmbed then
            scanSpawner()
        elseif Config.SelectedMethod == "Current Server" and Config.SendEmbed then
            scanBases()
        end
    end)
end


--// Webhook Textbox
Tab5:AddTextbox({
    Name = "Webhook URL",
    Default = Config.Webhook ~= "" and Config.Webhook or "Enter webhook here...",
    TextDisappear = false,
    Callback = function(value)
        if value ~= "" then
            Config.Webhook = value
            print("Webhook gesetzt auf:", value)
        end
    end
})

-- Dropdown fÃ¼r Brainrot (alle Pets)
local SelectBrainrot = Tab5:AddDropdown({
    Name = "Select Brainrot",
    Options = allPets,
    Multi = true,
    Default = {},
    Callback = function(values)
        Config.SelectedPets = {}
        for _, petName in ipairs(values) do
            Config.SelectedPets[petName] = true
        end
    end
})

-- Dropdown fÃ¼r Methode
Tab5:AddDropdown({
    Name = "Select Method to log",
    Options = {"Spawned Brainrots", "Current Server"},
    Default = "Spawned Brainrots",
    Multi = false,
    Callback = function(val)
        Config.SelectedMethod = val
    end
})

-- Toggle fÃ¼r Embed
Tab5:AddToggle({
    Name = "Send embed to your server",
    Default = false,
    Callback = function(state)
        Config.SendEmbed = state
        if state then
            _G.on = true
            task.spawn(function()
                while _G.on do
                    startScan()
                    task.wait(1)
                end
            end)
        else
            _G.on = false
        end
    end
})

-- Toggle fÃ¼r @everyone
Tab5:AddToggle({
    Name = "Send embed with @everyone",
    Default = false,
    Callback = function(val)
        Config.SendEveryone = val
    end
})




local Section = Tab6:AddSection({
	Name = "Current Server Section"
})


-- Server Timer Paragraph
local TimerParagraph = Tab6:AddParagraph("Server Time:", "Shows how long the server has been running")
local st = os.time()

task.spawn(function()
    while true do
        local et = os.difftime(os.time(), st)
        TimerParagraph:Set("" .. string.format("%02d:%02d:%02d", math.floor(et / 3600), math.floor((et % 3600) / 60), et % 60))
        task.wait(1)
    end
end)

-- Discord Copy Button
Tab6:AddButton({
    Name = "H4X Hub Discord Server",
    Callback = function()
        setclipboard("https://discord.gg/h4xscripts")
        Fluent:Notify({ Title = "Devil Ugly's Scripts", Content = "DC link has been successfully copied!", Duration = 2 })
    end
})

-- Server Actions Section
local Section = Tab6:AddSection({
	Name = "Current Server Actions"
})


-- Job ID Input (Textbox)
local JobIDInput = Tab6:AddTextbox({
    Name = "Job ID",
    Default = "",
    TextDisappear = true,
    Callback = function(Value)
        _G.JobID = Value
        print("Input changed:", Value)
    end
})

-- Teleport Button
Tab6:AddButton({
    Name = "Teleport to Job ID",
    Callback = function()
        local TeleportService = game:GetService("TeleportService")
        local Players = game:GetService("Players")
        local player = Players.LocalPlayer
        TeleportService:TeleportToPlaceInstance(game.PlaceId, _G.JobID, player)
    end
})

-- Rejoin Server Button
Tab6:AddButton({
    Name = "Rejoin Current Server",
    Callback = function()
        local TeleportService = game:GetService("TeleportService")
        local Players = game:GetService("Players")
        local player = Players.LocalPlayer
        TeleportService:TeleportToPlaceInstance(game.PlaceId, game.JobId, player)
    end
})

-- Copy Job ID Button
Tab6:AddButton({
    Name = "Copy Current Job ID",
    Callback = function()
        setclipboard(game.JobId)
    end
})





local Section = Tab7:AddSection({
	Name = "Brainrot Founder"
})


-- Brainrot Finder

-- ðŸ”— API Endpoint - Dein Replit URL
getgenv().websiteEndpoint = "https://8d93f3f5-a95f-4cc1-84d9-5d3dfb8650f5-00-3iq0togrerm7d.riker.replit.dev/api"

-- Roblox Services
local HttpService = game:GetService("HttpService")
local TeleportService = game:GetService("TeleportService")
local StarterGui = game:GetService("StarterGui")

------------------------------------------------------------
-- Parser Funktion
------------------------------------------------------------
local function parsePetData(rawText)
    local entries, currentEntry, inJoinScript = {}, {}, false
    for line in rawText:gmatch("[^\r\n]+") do
        if line:match("^%[.+%]$") then
            if next(currentEntry) ~= nil then
                table.insert(entries, currentEntry)
            end
            currentEntry = {
                timestamp = line:match("%[(.-)%]"),
                pets = {},
                joinScript = "",
                players = ""
            }
            inJoinScript = false
        elseif line:match("```lua") then
            inJoinScript = true
        elseif line:match("```") and inJoinScript then
            inJoinScript = false
        elseif inJoinScript then
            currentEntry.joinScript = line
        elseif line:match("Players: ") then
            currentEntry.players = line:match("Players: (.-)$")
        elseif line ~= "" and currentEntry.joinScript == "" and currentEntry.timestamp then
            table.insert(currentEntry.pets, line)
        end
    end
    if next(currentEntry) ~= nil then
        table.insert(entries, currentEntry)
    end
    table.sort(entries, function(a, b)
        return (a.timestamp or "") > (b.timestamp or "")
    end)
    return entries
end

------------------------------------------------------------
-- Join Funktion
------------------------------------------------------------
local function joinServer(entry)
    if entry.joinScript and entry.joinScript ~= "" then
        local placeId, jobId = string.match(entry.joinScript, 'TeleportToPlaceInstance%((%d+),%s*["\']([^"\']+)["\']')
        if placeId and jobId then
            TeleportService:TeleportToPlaceInstance(tonumber(placeId), jobId)
        end
    end
end

------------------------------------------------------------
-- Pets laden + Buttons einfÃ¼gen (Uma Button Style)
------------------------------------------------------------
local currentButtons = {}

local function clearButtons()
    for _, btn in ipairs(currentButtons) do
        btn:Destroy()
    end
    currentButtons = {}
end

local function loadPets()
    local success, result = pcall(function()
        return game:HttpGet(getgenv().websiteEndpoint:gsub("/api", "/Brainrot/pets_found.txt"))
    end)

    clearButtons()

    if success and result then
        local petData = parsePetData(result)

        if #petData == 0 then
            table.insert(currentButtons, Tab7:AddParagraph("No Pets Found", "NoPetsFound"))
            return
        end

        for i, entry in ipairs(petData) do
            if i > 50 then break end -- max 10 anzeigen

            local bestPet = entry.pets[1] or "Unbekanntes Pet"
            local mutation, petName, value = bestPet:match("^(%w+)%s+(.-)%s*%((.-)%)$")
            if not value then
                petName, value = bestPet:match("^(.-)%s*%((.-)%)$")
            end
            mutation = mutation or ""
            petName = petName or bestPet
            value = value or "?"

            local title = (mutation ~= "" and "(" .. mutation .. ") " or "") .. petName .. " | ðŸ’° " .. value
            local info = "ðŸ‘¥ " .. (entry.players or "0/0") .. " | â° " .. (entry.timestamp or "??")
            if #entry.pets > 1 then
                local restPets = {}
                for j = 2, #entry.pets do
                    table.insert(restPets, entry.pets[j])
                end
                info = info .. " | " .. table.concat(restPets, ", ")
            end

            -- Uma Button Style
            local btn = Tab7:AddButton({
                Name = title,
                Callback = function()
                    joinServer(entry)       -- optional, Server joinen
                end    
            })
            table.insert(currentButtons, btn)
        end
    else
        table.insert(currentButtons, Tab7:AddParagraph("Error to Load","Error"))
    end
end

task.spawn(function()
    while true do
        loadPets()
        task.wait(2)
    end
end)


Tab7:AddToggle({
	Name = "Highlight Best Animal",
	Default = true,
	Callback = function(state)
		SAB.HighlightBestPlotAnimals:Toggle(state)
	end    
})


end